/*
 * pruebaServidor.c
 *
 *  Created on: 11/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#define PUERTO "6667"
#define BACKLOG 5
#define PACKAGESIZE 1024

int conectarSocketServidor(char *puerto, int backlog) {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_socktype = SOCK_STREAM;

	if (getaddrinfo(NULL, puerto, &hints, &serverInfo) != 0) {
		printf("Error en la carga de informacion del socket servidor");
	}

	int listenningSocket;
	listenningSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);

	bind(listenningSocket, serverInfo->ai_addr, serverInfo->ai_addrlen);
	freeaddrinfo(serverInfo);

	listen(listenningSocket, backlog);

	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(addr);

	int socketCliente = accept(listenningSocket, (struct sockaddr *) &addr,
			&addrlen);

	return socketCliente;

}

int conectarSocketCliente(char *ip, char *puerto) {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if (getaddrinfo(ip, puerto, &hints, &serverInfo) != 0) {
		printf("Error en la carga de informacion del socket cliente");
	}

	int serverSocket;
	serverSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);
	if (serverSocket == -1) {
		printf("Error en la creacion del servidor");

	}
	if (connect(serverSocket, serverInfo->ai_addr, serverInfo->ai_addrlen)
			== -1) {
		printf("Error en la conexion con el proceso swap");

	}
	freeaddrinfo(serverInfo);
	return serverSocket;
}

typedef struct Protocolo {
	char id[7];
	char mensaje[10];
} Protocolo;

typedef enum identificadores {
	correr = 0
} Identidicadores;

void recivirIdentificador(int socket) {
	int recibiendo = 1;
	size_t cantMensaje;
	char *identificador = malloc(sizeof(int));
	recibiendo = recv(socket, identificador, sizeof(int), 0);
}

int main() {

	int socketCliente;
	socketCliente = conectarSocketServidor(PUERTO, BACKLOG);

	int status = 1;

	printf("Cliente conectado. Esperando mensajes:\n");

	while (status != 0) {
		recivirIdentificador(socketCliente);
		if (recibiendo != 1) {

				printf("El id que mandaste es: %s\n", identificador);
				recv(socket, &cantMensaje, sizeof(int), 0);
				printf("tama√±o del mensaje a leer: %d\n", cantMensaje);
				char *mensaje = malloc(cantMensaje);
				recv(socket, mensaje, cantMensaje, 0);
				printf("El mensaje es:%s\n", mensaje);
			}
	}

	close(socketCliente);

	return 0;
}

