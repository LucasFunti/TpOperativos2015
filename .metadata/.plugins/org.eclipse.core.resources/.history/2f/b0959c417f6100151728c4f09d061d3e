/*
 * pruebaCliente.c
 *
 *  Created on: 11/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#define IP "127.0.0.1"
#define PUERTO "6667"
#define PACKAGESIZE 1024

typedef struct {
	char *id;
	size_t longitud_id;
	char *mensaje;
	size_t longitud_mensaje;
} Paquete;

typedef enum identificadores {
	correr = 0
} Identidicadores;

int main() {
	int serverSocket;
	serverSocket = conectarSocketCliente( IP, PUERTO);
	int enviar = 1;
	char message[PACKAGESIZE];

	printf(
			"Conectado al servidor. Bienvenido al sistema, ya puede enviar mensajes. Escriba 'exit' para salir\n");

	while (enviar) {

		if (!strcmp(message, "exit\n"))
			enviar = 0;
		if (enviar) {
			Paquete paquete;
			paquete.id = malloc(6 + 1);
			paquete.mensaje = malloc(20 + 1);
			scanf("%s %s", paquete.id, paquete.mensaje);
			paquete.longitud_id = strlen(paquete.id);
			paquete.longitud_mensaje = strlen(paquete.mensaje);
			printf("El id del mensaje es: %s\n", paquete.id);
			printf("El mensaje enviado es: %s\n", paquete.mensaje);
			printf("El tamaño del id es:%d\n", paquete.longitud_id);
			printf("El tamaño del mensaje es: %d\n", paquete.longitud_mensaje);
			void *buffer = malloc(28);
			memcpy(buffer, &paquete.longitud_id, sizeof(int));
			memcpy(buffer + sizeof(int), paquete.id, paquete.longitud_id);
			memcpy(buffer + sizeof(int) + paquete.longitud_id,
					&paquete.longitud_mensaje, sizeof(int));
			memcpy(buffer + sizeof(int) + paquete.longitud_id + sizeof(int),
					paquete.mensaje, paquete.longitud_mensaje);
			size_t totalBuffer;
			totalBuffer =  (paquete.longitud_id + (sizeof(int)*2) + paquete.longitud_mensaje);
			send(serverSocket, buffer, totalBuffer , 0);

		}
	}

	close(serverSocket);
	return 0;

}
