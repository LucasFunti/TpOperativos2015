/*
 * pruebaServidor.c
 *
 *  Created on: 11/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#define PUERTO "6667"
#define BACKLOG 5
#define PACKAGESIZE 1024

typedef struct Protocolo {
	char id[7];
	char mensaje[10];
} Protocolo;

typedef enum identificadores {
	correr = 0
} Identidicadores;

int main() {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_socktype = SOCK_STREAM;

	getaddrinfo(NULL, PUERTO, &hints, &serverInfo);

	int listenningSocket;
	listenningSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);

	bind(listenningSocket, serverInfo->ai_addr, serverInfo->ai_addrlen);
	freeaddrinfo(serverInfo);

	listen(listenningSocket, BACKLOG);

	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(addr);

	int socketCliente = accept(listenningSocket, (struct sockaddr *) &addr,
			&addrlen);

	char package[PACKAGESIZE];
	int status = 1;
	int identificador;
	printf("Cliente conectado. Esperando mensajes:\n");

	while (status != 0) {
		void *buffer = malloc(17);
		/*char *mensaje = malloc(17);*/
		status = recv(socketCliente, buffer, 17, 0);

		/*strcpy(mensaje, buffer);*/

		if (status != 0) {
			Protocolo *prot = malloc(sizeof(Protocolo));
			memcpy(&(prot->id), buffer + 0, 5);
			memcpy(&(prot->mensaje), buffer + 7, 9);
			/*printf("El mensaje enviado es: %s \n", mensaje);*/
			printf("El identificador es:%s \n", prot->id);
			printf("El mesnaje sin id es:%s \n", prot->mensaje);
			free(buffer);
			/*free(mensaje);*/
		}

	}

	close(socketCliente);
	close(listenningSocket);

	return 0;
}
