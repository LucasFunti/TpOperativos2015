/*
 * pruebaServidor.c
 *
 *  Created on: 11/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#define PUERTO "6667"
#define BACKLOG 5
#define PACKAGESIZE 1024

typedef struct Protocolo{
	int id;
	char mensaje[10];
} Protocolo;

int main(){

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_socktype = SOCK_STREAM;

	getaddrinfo(NULL, PUERTO, &hints, &serverInfo);

	int listenningSocket;
	listenningSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype, serverInfo->ai_protocol);

	bind(listenningSocket,serverInfo->ai_addr, serverInfo->ai_addrlen);
	freeaddrinfo(serverInfo);

	listen(listenningSocket, BACKLOG);

	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(addr);

	int socketCliente = accept(listenningSocket, (struct sockaddr *) &addr, &addrlen);

	char package[PACKAGESIZE];
	int status = 1;

	printf("Cliente conectado. Esperando mensajes:\n");

	while (status != 0){
		void *buffer = malloc(5);
		recv(socketCliente, buffer, 5, 0);
		Protocolo *prot = malloc(sizeof(Protocolo));
		memcpy(&(Protocolo.id), buffer, 1);
		memcpy(&(Protocolo.cuerpo), buffer + 1, 4);
		status = recv(socketCliente, (void*) package, PACKAGESIZE, 0);
		if (status != 0) printf("%s", package);

	}

	close(socketCliente);
	close(listenningSocket);



	return 0;
}
