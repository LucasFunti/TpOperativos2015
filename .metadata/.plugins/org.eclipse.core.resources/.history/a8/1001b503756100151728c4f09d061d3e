/*
 * pruebaCliente.c
 *
 *  Created on: 11/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

#define IP "127.0.0.1"
#define PUERTO "6667"
#define PACKAGESIZE 1024

int conectarSocketServidor(char *puerto, int backlog) {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_socktype = SOCK_STREAM;

	if (getaddrinfo(NULL, puerto, &hints, &serverInfo) != 0) {
		printf("Error en la carga de informacion del socket servidor");
	}

	int listenningSocket;
	listenningSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);

	bind(listenningSocket, serverInfo->ai_addr, serverInfo->ai_addrlen);
	freeaddrinfo(serverInfo);

	listen(listenningSocket, backlog);

	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(addr);

	int socketCliente = accept(listenningSocket, (struct sockaddr *) &addr,
			&addrlen);

	return socketCliente;

}

int conectarSocketCliente(char *ip, char *puerto) {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if (getaddrinfo(ip, puerto, &hints, &serverInfo) != 0) {
		printf("Error en la carga de informacion del socket cliente");
	}

	int serverSocket;
	serverSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);
	if (serverSocket == -1) {
		printf("Error en la creacion del servidor");

	}
	if (connect(serverSocket, serverInfo->ai_addr, serverInfo->ai_addrlen)
			== -1) {
		printf("Error en la conexion con el proceso swap");

	}
	freeaddrinfo(serverInfo);
	return serverSocket;
}

typedef struct Protocolo {
	char id[6];
	int cantidadBytes;
} ProtocoloCabecera;

typedef enum identificadores {
	correr = 0
} Identidicadores;

void enviarString(int socket, char *id, char *mensaje, int tamanio_id,int tamanio_mensaje) {
	void *buffer = malloc(sizeof(tamanio_id)+sizeof(tamanio_mensaje));
	memcpy(buffer, id, tamanio_id);
	memcpy(buffer + tamanio_id, &tamanio_mensaje, sizeof(int));
	memcpy(buffer + tamanio_id + sizeof(int), mensaje, tamanio_mensaje);
	send(socket, buffer, tamanio_id + sizeof(int) + tamanio_mensaje, 0);
}

int main() {
	int serverSocket;
	serverSocket = conectarSocketCliente( IP, PUERTO);
	int enviar = 1;
	char message[PACKAGESIZE];

	printf(
			"Conectado al servidor. Bienvenido al sistema, ya puede enviar mensajes. Escriba 'exit' para salir\n");

	while (enviar) {

		if (!strcmp(message, "exit\n"))
			enviar = 0;
		if (enviar) {

			char *identificador = malloc(sizeof(int));
			scanf("%s %s", identificador, message);
			size_t messageLength = strlen(message);
			size_t idtamanio = strlen(identificador);
			printf("El id del mensaje es: %s\n", identificador);
			printf("El mensaje enviado es: %s\n", message);
			printf("El tama√±o del  mensaje es:%d\n", messageLength);
			enviarString(serverSocket,identificador,message,idtamanio,messageLength);

		}
	}

	close(serverSocket);
	return 0;

}
