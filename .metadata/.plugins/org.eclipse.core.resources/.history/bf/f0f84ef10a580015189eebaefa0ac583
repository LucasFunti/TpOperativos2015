/*
 * servidor.c
 *
 *  Created on: 5/9/2015
 *      Author: utnso
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>


#define PUERTO "6667"
#define BACKLOG 5	// Define cuantas conexiones vamos a mantener pendientes al mismo tiempo
#define PACKAGESIZE 1024	// Define cual va a ser el size maximo del paquete a enviar

typedef struct CorrerPrograma{
	char *instruccion[32];
}correrPrograma;

typedef enum Identificadores{
	correr = 0
}Identificadores;

typedef struct Cabecera{
	int identificador;
	int cantidadBytes;
}Protocolo;

void leeMensaje (int socket, int *idMensaje, char **mensaje)
{
    Cabecera cabecera;
    *mensaje = NULL;  /* Ponemos el mensaje a NULL por defecto */

    read (socket, &cabecera, sizeof(cabecera)); /* Se lee la cabecera */

    /* Rellenamos el identificador para devolverlo */
    *idMensaje = cabecera.identificador;

    /* Si hay que leer una estructura detrÃ¡s */
    if (cabecera.longitud > 0)
    {
        *mensaje = (char *)malloc (longitud);  /* Se reserva espacio para leer el mensaje */
        read (socket, *mensaje, longtud);
    }
}



int main() {

	struct addrinfo hints;
	struct addrinfo *serverInfo;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_flags = AI_PASSIVE;
	hints.ai_socktype = SOCK_STREAM;

	getaddrinfo(NULL, PUERTO, &hints, &serverInfo);

	int listenningSocket;
	listenningSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype,
			serverInfo->ai_protocol);
	if (listenningSocket == -1){
		printf("Error en el socket de escucha\n");
		return -1;
	}
	
	if (bind(listenningSocket, serverInfo->ai_addr, serverInfo->ai_addrlen) == -1){
		printf("Error en el bindeo\n");
		return -2;
	}
	freeaddrinfo(serverInfo);
	
	listen(listenningSocket, BACKLOG);

	struct sockaddr_in addr;
	socklen_t addrlen = sizeof(addr);
	int socketCliente = accept(listenningSocket, (struct sockaddr *) &addr,
			&addrlen);
	if (socketCliente == -1){
		printf("Error en la aceptacion del cliente\n");
		return -3;
	}
	char package[PACKAGESIZE];
	char message[PACKAGESIZE];
	int status = 1;

	printf("Cliente conectado. Esperando mensajes:\n");

	while (status != 0) {
		status = recv(socketCliente, (void*) package, PACKAGESIZE, 0);
		if (status != 0) {
			printf("%s", package);
			
		/*	fgets(message, PACKAGESIZE, stdin);
			send(socketCliente,message, strlen(message),0);
			*/
			
		}
	}

	close(socketCliente);
	close(listenningSocket);
	
	return 0;
}
